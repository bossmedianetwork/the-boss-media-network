{"version":3,"file":"static/js/283.c3e348e7.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/utils/textAnimations.tsx","components/MiddleBlock/index.tsx","components/MiddleBlock/styles.tsx"],"sourcesContent":["import styled, { css, keyframes } from \"styled-components\";\r\n\r\nconst clickAnimation = keyframes`\r\n  0% {\r\n    box-shadow: inset 0 0 0 0 #1b4f72;\r\n  }\r\n  100% {\r\n    box-shadow: inset 2px 2px 4px 0 #1b4f72, inset -2px -2px 4px 0 #1b4f72;  // Smoother and centered bevel effect\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled(\"button\")<{ glowing: boolean; fixedWidth: boolean }>`\r\n  width: ${(props) => (props.fixedWidth ? '180px' : '100%')};\r\n  background: ${(p) => p.color ? `linear-gradient(45deg, #286fff, #7aa9ff)` : \"radial-gradient(circle farthest-corner at center center, #286fff 0%, #397ad9 5%, #7aa9ff 90%, #7aa9ff 100%)\"};\r\n  color: #FFFFFF;\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : '1px solid #ccc')};  \r\n  border-radius: 8px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 1rem;  // Increased top margin\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  position: relative;\r\n  outline: none;\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 20px #286fff, 0 0 30px #286fff, 0 0 34px #7aa9ff;  // Crisper glow on hover\r\n  }\r\n\r\n  &:active {\r\n    animation: ${clickAnimation} 0.1s forwards;  // Bevel effect on click\r\n  }\r\n\r\n  @media only screen and (max-width: 1025px) {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n","import React, { ReactElement } from 'react';\r\n\r\n// my-app/src/common/utils/textAnimations.tsx\r\n\r\nexport const splitTitleIntoWords = (title: string) => {\r\n  return title.split(' ').map((word, index) => (\r\n    <React.Fragment key={index}>\r\n      <span className={`word word-${index}`}>{word}</span>{' '}\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// Function to handle paragraph splitting into letters and words with preserved spaces\r\nexport const wrapParagraphs = (text: string): ReactElement[] => {\r\n  let wordIndex = 0;\r\n  let elements: ReactElement[] = [];\r\n  // Split the text by spaces to get words and potential line breaks\r\n  const words = text.split(' ');\r\n\r\n  words.forEach((word, wordIdx) => {\r\n    // Split by line breaks within the word to handle them separately\r\n    const parts = word.split('\\n');\r\n    parts.forEach((part, partIdx) => {\r\n      // For each part that's not the first, insert a line break\r\n      if (partIdx > 0) {\r\n        elements.push(<br key={`br-${wordIndex}`} />);\r\n        wordIndex++;\r\n      }\r\n      // Add the non-empty parts as spans\r\n      if (part) {\r\n        elements.push(\r\n          <span key={`part-${wordIndex}`} className={`letter letter-${wordIndex}`}>\r\n            {part}\r\n          </span>\r\n        );\r\n        wordIndex++;\r\n      }\r\n    });\r\n    // After each word (and its parts), add a space unless it's the last word\r\n    if (wordIdx < words.length - 1) {\r\n      elements.push(\r\n        <span key={`space-${wordIndex}`} className=\"letter\">\r\n          &nbsp; {/* Use a non-breaking space to ensure it's rendered */}\r\n        </span>\r\n      );\r\n      wordIndex++;\r\n    }\r\n  });\r\n\r\n  return elements;\r\n};\r\n","// MiddleBlock/index.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { StyledButton } from \"../../common/Button/styles\";\r\nimport {\r\n  MiddleBlockSection,\r\n  Content,\r\n  ContentWrapper,\r\n  Title,\r\n  ImageWrapper,\r\n  GreyArea, // This will be the styled component for the grey area\r\n} from \"./styles\";\r\nimport { splitTitleIntoWords, wrapParagraphs } from \"../../common/utils/textAnimations\";\r\n\r\ninterface MiddleBlockProps {\r\n  title: string;\r\n  content: string;\r\n  button: string;\r\n  id?: string;\r\n  t: any;\r\n}\r\n\r\nconst MiddleBlock = ({ title, content, button, id, t }: MiddleBlockProps) => {\r\n  const [isMounted, setIsMounted] = useState(false);\r\n  // New state to track if animations are finished\r\n  const [animationsFinished, setAnimationsFinished] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsMounted(true);\r\n    // Start a timer that will set animationsFinished to true\r\n    // once the text animations are done. Adjust the duration to match your animations\r\n    const timer = setTimeout(() => {\r\n      setAnimationsFinished(true);\r\n    }, /* Duration of your text animations in milliseconds */);\r\n\r\n    // Cleanup function to clear the timer when the component unmounts\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const scrollToContactForm = () => {\r\n    document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  return (\r\n    <MiddleBlockSection id={id}>\r\n      {isMounted && (\r\n        <Row justify=\"start\" align=\"middle\">\r\n          <Title>{splitTitleIntoWords(t(title))}</Title>\r\n          <ContentWrapper>\r\n            <Col lg={12} md={24} sm={24} xs={24}>\r\n              {/* Render Content and StyledButton only when animations are finished */}\r\n              {animationsFinished && (\r\n                <GreyArea animationsFinished={animationsFinished}>\r\n                  <Content>\r\n                    {wrapParagraphs(t(content))}\r\n                  </Content>\r\n                  <StyledButton onClick={scrollToContactForm} glowing={true} fixedWidth={true}>\r\n                    {t(button)}\r\n                  </StyledButton>\r\n                </GreyArea>\r\n              )}\r\n            </Col>\r\n            <Col lg={12} md={24} sm={24} xs={24}>\r\n              <ImageWrapper>\r\n                <video autoPlay loop muted playsInline className=\"intro-video\">\r\n                  <source src=\"/img/video/phone-video.webm\" type=\"video/webm\" />\r\n                  Your browser does not support the video tag.\r\n                </video>\r\n              </ImageWrapper>\r\n            </Col>\r\n          </ContentWrapper>\r\n        </Row>\r\n      )}\r\n    </MiddleBlockSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(MiddleBlock);\r\n","import styled, { css, keyframes } from \"styled-components\";\r\n\r\n// Keyframes for word animation\r\nexport const fadeInUp = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n// Keyframes for image slide-in on desktop and up on mobile\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideInUp = keyframes`\r\n  from {\r\n    transform: translateY(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    visibility: hidden;\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    visibility: visible;\r\n    opacity: .9;\r\n  }\r\n`;\r\n\r\n// Define the StyledMiddleBlock with rounded corners and visibility hidden initially\r\nexport const StyledMiddleBlock = styled.section`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  display: flex;\r\n  justify-content: center; // Center children horizontally\r\n  align-items: center; // Center children vertically\r\n  flex-direction: column;\r\n  border-radius: 20px;\r\n  visibility: hidden;\r\n  animation: ${fadeIn} 2s ease forwards;\r\n  animation-delay: 3s;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  min-height: 600px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\n// Update GreyArea for the glowing effect\r\nexport const GreyArea = styled.div<{ animationsFinished: boolean }>`\r\n  background-color: #1c1c1c;\r\n  padding: 2rem;\r\n  margin-top: 2rem;\r\n  border-radius: 12px; // Rounded corners\r\n  border: 2px solid #ccc;\r\n  box-shadow: 0 0 10px rgba(255, 255, 255, 0.2), // Lighter shadow\r\n             0 0 20px rgba(255, 255, 255, 0.2), // Lighter shadow\r\n             0 0 30px rgba(255, 255, 255, 0.2); // Lighter shadow\r\n  animation: ${fadeIn} 2s ease forwards;\r\n  animation-delay: 3s;\r\n  visibility: ${props => props.animationsFinished ? 'visible' : 'hidden'};\r\n  animation: ${props => props.animationsFinished ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n`;\r\n\r\n\r\nexport const StyledButton = styled.button<{ animationsFinished: boolean }>`\r\n  padding: 10px 20px;\r\n  background-color: #ff2d2d; // A bright red background\r\n  color: white; // Text color\r\n  font-size: 1em; // Adjust font size as needed\r\n  border: none;\r\n  border-radius: 4px; // Adjust border-radius as needed\r\n  cursor: pointer;\r\n  outline: none;\r\n  transition: all 0.3s ease-in-out;\r\n  position: relative;\r\n  z-index: 2;\r\n  overflow: hidden;\r\n  visibility: ${props => props.animationsFinished ? 'visible' : 'hidden'};\r\n  animation: ${props => props.animationsFinished ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n\r\n  // Neon glow effect\r\n  box-shadow: \r\n    0 0 5px #ff2d2d, // Red glow\r\n    0 0 15px #ff2d2d, // Stronger red glow\r\n    0 0 30px #ff69b4, // Pink glow\r\n    0 0 45px #ff69b4, // Stronger pink glow\r\n\r\n  // Text glow effect on hover\r\n  &:hover {\r\n    box-shadow: \r\n      0 0 10px #ffffff, // White glow\r\n      0 0 20px #fff, // Pink glow\r\n      0 0 30px #fff, // Stronger pink glow\r\n    color: #ff69b4; // Change text color to pink on hover\r\n  }\r\n\r\n  // Fallback for browsers that do not support the glow effect\r\n  &:focus {\r\n    background-color: #ff2d2d;\r\n    color: white;\r\n  }\r\n\r\n  // Add media queries if you need to adjust the sizes on different screen sizes\r\n`;\r\n\r\n// Helper function to generate delays\r\nconst generateDelay = (index: number, baseDelay = 0.05) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const MiddleBlockSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px;\r\n  min-height: 600px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.5rem, 5vw, 20em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 2px #ffffff;\r\n  text-align: center; // Center the text horizontally\r\n  margin: 0 auto; // Center the title element itself\r\n  width: 100%; // Take the full width of its container\r\n  white-space: nowrap; // Prevent text wrapping\r\n  position: relative; // Positioned relative to its parent\r\n\r\n  .word {\r\n    display: inline-block;\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n`;\r\n\r\nexport const Content = styled(\"div\")`\r\n  padding: clamp(0rem, 0vw, 0rem) 0;\r\n  font-size: clamp(1rem, 2.5vw, 1.5em);\r\n  .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards;\r\n  }\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)};\r\n    }\r\n  `)}\r\n\r\n  .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.08s ease forwards;\r\n  }\r\n\r\n  // Generate dynamic delays for each letter\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.01)}; // You can adjust the delay as needed\r\n    }\r\n  `)}\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 0 1rem;\r\n    margin-top: 0em;\r\n  }\r\n  // Increase paragraph font size and align text to the left on desktop\r\n  @media only screen and (min-width: 1024px) {\r\n    font-size: 1.5em !important; // Adjust font size as needed for desktop\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  max-width: 1200px;\r\n  width: 90%;\r\n  margin: auto;\r\n  gap: 2rem; // Add this line to create a margin between the left and right sections\r\n  @media only screen and (max-width: 768px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const ImageWrapper = styled.div`\r\n  animation: ${slideInLeft} 1s ease forwards;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  .intro-video {\r\n    width: 100%; // Make the video responsive and cover the available width\r\n    height: auto; // Maintain aspect ratio\r\n    max-width: clamp(250px, 50vw, 500px); // Limit the width on larger screens\r\n  }\r\n\r\n  // Specific media query for the troublesome range\r\n  @media only screen and (min-width: 765px) and (max-width: 980px) {\r\n    .intro-video {\r\n      max-height: 100%; // Ensure it does not exceed the container's height\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    animation: ${slideInUp} 1s ease forwards;\r\n    .intro-video {\r\n      max-width: 300px; // Decrease the size for mobile devices\r\n    }\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    order: -1; // This will move the ImageWrapper above the content if flex-direction is column\r\n    width: 100%; // Adjust the width as needed to center the video\r\n    margin-bottom: -2rem; // Add some space below the video\r\n    margin-top: 2rem;\r\n  }\r\n`;"],"names":["clickAnimation","keyframes","_templateObject","_taggedTemplateLiteral","StyledButton","styled","_templateObject2","props","fixedWidth","p","color","glowing","splitTitleIntoWords","title","split","map","word","index","_jsxs","React","children","_jsx","className","concat","wrapParagraphs","text","wordIndex","elements","words","forEach","wordIdx","part","partIdx","push","length","withTranslation","_ref","content","button","id","t","_useState","useState","_useState2","_slicedToArray","isMounted","setIsMounted","_useState3","_useState4","animationsFinished","setAnimationsFinished","useEffect","timer","setTimeout","clearTimeout","MiddleBlockSection","Row","justify","align","Title","ContentWrapper","Col","lg","md","sm","xs","GreyArea","Content","onClick","_document$getElementB","document","getElementById","scrollIntoView","behavior","ImageWrapper","autoPlay","loop","muted","playsInline","src","type","fadeInUp","slideInLeft","slideInUp","_templateObject3","fadeInLetters","_templateObject4","fadeIn","_templateObject5","section","_templateObject6","div","_templateObject7","css","_templateObject8","generateDelay","_templateObject9","_templateObject10","baseDelay","arguments","undefined","_templateObject11","_templateObject12","_templateObject13","Array","from","_","_templateObject14","_templateObject15","_templateObject16","_templateObject17","_templateObject18","_templateObject19"],"sourceRoot":""}