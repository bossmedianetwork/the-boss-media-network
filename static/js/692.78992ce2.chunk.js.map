{"version":3,"file":"static/js/692.78992ce2.chunk.js","mappings":"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","sources":["common/utils/textAnimations.tsx","components/MiddleBlock/styles.tsx","components/VideoBackground/styles.tsx","components/VideoBackground/index.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\r\n\r\n// my-app/src/common/utils/textAnimations.tsx\r\n\r\nexport const splitTitleIntoWords = (title: string) => {\r\n  return title.split(' ').map((word, index) => (\r\n    <React.Fragment key={index}>\r\n      <span className={`word word-${index}`}>{word}</span>{' '}\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// Function to handle paragraph splitting into letters and words with preserved spaces\r\nexport const wrapParagraphs = (text: string): ReactElement[] => {\r\n  let wordIndex = 0;\r\n  let elements: ReactElement[] = [];\r\n  // Split the text by spaces to get words and potential line breaks\r\n  const words = text.split(' ');\r\n\r\n  words.forEach((word, wordIdx) => {\r\n    // Split by line breaks within the word to handle them separately\r\n    const parts = word.split('\\n');\r\n    parts.forEach((part, partIdx) => {\r\n      // For each part that's not the first, insert a line break\r\n      if (partIdx > 0) {\r\n        elements.push(<br key={`br-${wordIndex}`} />);\r\n        wordIndex++;\r\n      }\r\n      // Add the non-empty parts as spans\r\n      if (part) {\r\n        elements.push(\r\n          <span key={`part-${wordIndex}`} className={`letter letter-${wordIndex}`}>\r\n            {part}\r\n          </span>\r\n        );\r\n        wordIndex++;\r\n      }\r\n    });\r\n    // After each word (and its parts), add a space unless it's the last word\r\n    if (wordIdx < words.length - 1) {\r\n      elements.push(\r\n        <span key={`space-${wordIndex}`} className=\"letter\">\r\n          &nbsp; {/* Use a non-breaking space to ensure it's rendered */}\r\n        </span>\r\n      );\r\n      wordIndex++;\r\n    }\r\n  });\r\n\r\n  return elements;\r\n};\r\n","import styled, { css, keyframes } from \"styled-components\";\r\n\r\n// Keyframes for word animation\r\nexport const fadeInUp = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n// Keyframes for image slide-in on desktop and up on mobile\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideInUp = keyframes`\r\n  from {\r\n    transform: translateY(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    visibility: hidden;\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    visibility: visible;\r\n    opacity: .9;\r\n  }\r\n`;\r\n\r\n// Define the StyledMiddleBlock with rounded corners and visibility hidden initially\r\nexport const StyledMiddleBlock = styled.section`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  display: flex;\r\n  justify-content: center; // Center children horizontally\r\n  align-items: center; // Center children vertically\r\n  flex-direction: column;\r\n  border-radius: 20px;\r\n  visibility: hidden;\r\n  animation: ${fadeIn} 2s ease forwards;\r\n  animation-delay: 3s;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  min-height: 600px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\n// Update GreyArea for the glowing effect\r\nexport const GreyArea = styled.div<{ animationsFinished: boolean }>`\r\n  background-color: #1c1c1c;\r\n  padding: 2rem;\r\n  margin-top: 2rem;\r\n  border-radius: 12px; // Rounded corners\r\n  border: 2px solid #ccc;\r\n  box-shadow: 0 0 10px rgba(255, 255, 255, 0.2), // Lighter shadow\r\n             0 0 20px rgba(255, 255, 255, 0.2), // Lighter shadow\r\n             0 0 30px rgba(255, 255, 255, 0.2); // Lighter shadow\r\n  animation: ${fadeIn} 2s ease forwards;\r\n  animation-delay: 3s;\r\n  visibility: ${props => props.animationsFinished ? 'visible' : 'hidden'};\r\n  animation: ${props => props.animationsFinished ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n`;\r\n\r\n\r\nexport const StyledButton = styled.button<{ animationsFinished: boolean }>`\r\n  padding: 10px 20px;\r\n  background-color: #ff2d2d; // A bright red background\r\n  color: white; // Text color\r\n  font-size: 1em; // Adjust font size as needed\r\n  border: none;\r\n  border-radius: 4px; // Adjust border-radius as needed\r\n  cursor: pointer;\r\n  outline: none;\r\n  transition: all 0.3s ease-in-out;\r\n  position: relative;\r\n  z-index: 2;\r\n  overflow: hidden;\r\n  visibility: ${props => props.animationsFinished ? 'visible' : 'hidden'};\r\n  animation: ${props => props.animationsFinished ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n\r\n  // Neon glow effect\r\n  box-shadow: \r\n    0 0 5px #ff2d2d, // Red glow\r\n    0 0 15px #ff2d2d, // Stronger red glow\r\n    0 0 30px #ff69b4, // Pink glow\r\n    0 0 45px #ff69b4, // Stronger pink glow\r\n\r\n  // Text glow effect on hover\r\n  &:hover {\r\n    box-shadow: \r\n      0 0 10px #ffffff, // White glow\r\n      0 0 20px #fff, // Pink glow\r\n      0 0 30px #fff, // Stronger pink glow\r\n    color: #ff69b4; // Change text color to pink on hover\r\n  }\r\n\r\n  // Fallback for browsers that do not support the glow effect\r\n  &:focus {\r\n    background-color: #ff2d2d;\r\n    color: white;\r\n  }\r\n\r\n  // Add media queries if you need to adjust the sizes on different screen sizes\r\n`;\r\n\r\n// Helper function to generate delays\r\nconst generateDelay = (index: number, baseDelay = 0.05) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const MiddleBlockSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px;\r\n  min-height: 600px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.5rem, 5vw, 20em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 2px #ffffff;\r\n  text-align: center; // Center the text horizontally\r\n  margin: 0 auto; // Center the title element itself\r\n  width: 100%; // Take the full width of its container\r\n  white-space: nowrap; // Prevent text wrapping\r\n  position: relative; // Positioned relative to its parent\r\n\r\n  .word {\r\n    display: inline-block;\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n`;\r\n\r\nexport const Content = styled(\"div\")`\r\n  padding: clamp(0rem, 0vw, 0rem) 0;\r\n  font-size: clamp(1rem, 2.5vw, 1.5em);\r\n  .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards;\r\n  }\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)};\r\n    }\r\n  `)}\r\n\r\n  .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.08s ease forwards;\r\n  }\r\n\r\n  // Generate dynamic delays for each letter\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.01)}; // You can adjust the delay as needed\r\n    }\r\n  `)}\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 0 1rem;\r\n    margin-top: 0em;\r\n  }\r\n  // Increase paragraph font size and align text to the left on desktop\r\n  @media only screen and (min-width: 1024px) {\r\n    font-size: 1.5em !important; // Adjust font size as needed for desktop\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  max-width: 1200px;\r\n  width: 90%;\r\n  margin: auto;\r\n  gap: 2rem; // Add this line to create a margin between the left and right sections\r\n  @media only screen and (max-width: 768px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const ImageWrapper = styled.div`\r\n  animation: ${slideInLeft} 1s ease forwards;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  overflow: hidden;\r\n\r\n  .intro-video {\r\n    width: 100%; // Make the video responsive and cover the available width\r\n    height: auto; // Maintain aspect ratio\r\n    max-width: clamp(250px, 50vw, 500px); // Limit the width on larger screens\r\n  }\r\n\r\n  // Specific media query for the troublesome range\r\n  @media only screen and (min-width: 765px) and (max-width: 980px) {\r\n    .intro-video {\r\n      max-height: 100%; // Ensure it does not exceed the container's height\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    animation: ${slideInUp} 1s ease forwards;\r\n    .intro-video {\r\n      max-width: 300px; // Decrease the size for mobile devices\r\n    }\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    order: -1; // This will move the ImageWrapper above the content if flex-direction is column\r\n    width: 100%; // Adjust the width as needed to center the video\r\n    margin-bottom: -2rem; // Add some space below the video\r\n    margin-top: 2rem;\r\n  }\r\n`;","import styled, { css, keyframes } from 'styled-components';\r\nimport { fadeInUp } from '../MiddleBlock/styles'; // Import only fadeInUp if it's being used here\r\n\r\n// Define the keyframes directly in this file if they're unique to VideoBackground\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(-100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Define your generateDelay function\r\nconst generateDelay = (index: number, baseDelay = 0.8) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const VideoContainer = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 100vw;\r\n  height: 500px;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px; // Default margin for desktop\r\n\r\n  // Add a media query for mobile devices\r\n  @media only screen and (max-width: 768px) {\r\n    margin-bottom: -220px; // Smaller margin for mobile devices\r\n  }\r\n\r\n  // If needed, add another media query for tablets or other specific sizes\r\n  @media only screen and (min-width: 769px) and (max-width: 1024px) {\r\n    margin-bottom: -150px; // If you want a different margin for tablets\r\n  }\r\n`;\r\n\r\nexport const Video = styled.video`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  z-index: -100;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n`;\r\n\r\nexport const OverlayText = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 100;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    top: 23%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.3rem, 4vw, 4em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 1px #0048b2;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  margin-top: 0em;\r\n\r\n  .word {\r\n    display: inline-block;\r\n    opacity: 0;\r\n  }\r\n\r\n  &.inView .word {\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n\r\n  // Styles for screens larger than 1024px\r\n  @media only screen and (min-width: 1024px) {\r\n    text-align: left;\r\n    // You might want to adjust margin-top here if needed for larger screens\r\n  }\r\n\r\n  // Styles for screens between 768px and 1024px\r\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\r\n    margin-bottom: .2em; // Sets the top margin to 1em for tablet devices\r\n  }\r\n\r\n  // Styles for screens up to 768px\r\n  @media only screen and (max-width: 768px) {\r\n    font-size: 1.5em; // Adjust this value as needed\r\n    text-align: center; // Keep text aligned at center on smaller screens\r\n    margin-bottom: .4em; // Spacing below the title for smaller screens\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"div\")`\r\n  padding: clamp(0.5rem, 2vw, 1rem) 0;\r\n  font-size: clamp(1rem, 2.5vw, 1.5em);\r\n\r\n  &.inView .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards; /* Increased duration */\r\n  }\r\n\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)}; /* Increased delay for each paragraph */\r\n    }\r\n  `)}\r\n\r\n  &.inView .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.5s ease forwards; /* Increased duration */\r\n  }\r\n\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.5)}; /* Adjusted delay for each letter */\r\n    }\r\n  `)}\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;","// VideoBackground component\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { VideoContainer, Video, OverlayText, Title, Content } from './styles';\r\nimport { splitTitleIntoWords, wrapParagraphs } from '../../common/utils/textAnimations';\r\n\r\ninterface VideoBackgroundProps {\r\n  videoSrc: string;\r\n  title: string;\r\n  text: string;\r\n}\r\n\r\nconst VideoBackground: React.FC<VideoBackgroundProps> = ({ videoSrc, title, text }) => {\r\n  const titleRef = useRef<HTMLHeadingElement>(null);\r\n  const [titleInView, setTitleInView] = useState(false);\r\n\r\n  const textRef = useRef<HTMLDivElement>(null);\r\n  const [textInView, setTextInView] = useState(false);\r\n\r\n  // Intersection observer setup for triggering animations when elements come into view\r\n  useEffect(() => {\r\n    const observerOptions = { threshold: 0.1 }; // Threshold adjusted to trigger when element is slightly in view\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach(entry => {\r\n        if (entry.target === titleRef.current) {\r\n          setTitleInView(entry.isIntersecting);\r\n        }\r\n        if (entry.target === textRef.current) {\r\n          setTextInView(entry.isIntersecting);\r\n        }\r\n      });\r\n    }, observerOptions);\r\n\r\n    if (titleRef.current) {\r\n      observer.observe(titleRef.current);\r\n    }\r\n    if (textRef.current) {\r\n      observer.observe(textRef.current);\r\n    }\r\n\r\n    // Cleanup function to unobserve the elements\r\n    return () => {\r\n      if (titleRef.current) {\r\n        observer.unobserve(titleRef.current);\r\n      }\r\n      if (textRef.current) {\r\n        observer.unobserve(textRef.current);\r\n      }\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <VideoContainer>\r\n      <Video autoPlay loop muted>\r\n        <source src={videoSrc} type=\"video/mp4\" />\r\n        Your browser does not support the video tag.\r\n      </Video>\r\n      <OverlayText>\r\n        <Title ref={titleRef} className={titleInView ? 'inView' : ''}>\r\n          {splitTitleIntoWords(title)}\r\n        </Title>\r\n        <Content ref={textRef} className={textInView ? 'inView' : ''}>\r\n          {wrapParagraphs(text)}\r\n        </Content>\r\n      </OverlayText>\r\n    </VideoContainer>\r\n  );\r\n};\r\n\r\nexport default VideoBackground;\r\n"],"names":["splitTitleIntoWords","title","split","map","word","index","_jsxs","React","children","_jsx","className","concat","wrapParagraphs","text","wordIndex","elements","words","forEach","wordIdx","part","partIdx","push","length","fadeInUp","keyframes","_templateObject","_taggedTemplateLiteral","slideInLeft","_templateObject2","slideInUp","_templateObject3","fadeInLetters","_templateObject4","fadeIn","_templateObject5","GreyArea","styled","section","_templateObject6","div","_templateObject7","props","animationsFinished","css","_templateObject8","generateDelay","button","_templateObject9","_templateObject10","baseDelay","arguments","undefined","_templateObject11","MiddleBlockSection","_templateObject12","Title","_templateObject13","Array","from","_","_templateObject14","Content","_templateObject15","_templateObject16","_templateObject17","ContentWrapper","_templateObject18","ImageWrapper","_templateObject19","VideoContainer","Video","video","OverlayText","_ref","videoSrc","titleRef","useRef","_useState","useState","_useState2","_slicedToArray","titleInView","setTitleInView","textRef","_useState3","_useState4","textInView","setTextInView","useEffect","observer","IntersectionObserver","entries","entry","target","current","isIntersecting","threshold","observe","unobserve","disconnect","autoPlay","loop","muted","src","type","ref"],"sourceRoot":""}