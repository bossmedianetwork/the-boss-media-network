{"version":3,"file":"static/js/358.8692a962.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/utils/useForm.tsx","common/utils/validationRules.ts","common/Button/index.tsx","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","components/ContactForm/styles.ts","components/ToggleableInputField/index.tsx","components/ContactForm/index.tsx"],"sourcesContent":["import styled, { css, keyframes } from \"styled-components\";\r\n\r\nconst clickAnimation = keyframes`\r\n  0% {\r\n    box-shadow: inset 0 0 0 0 #1b4f72;\r\n  }\r\n  100% {\r\n    box-shadow: inset 2px 2px 4px 0 #1b4f72, inset -2px -2px 4px 0 #1b4f72;  // Smoother and centered bevel effect\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled(\"button\")<{ glowing: boolean; fixedWidth: boolean }>`\r\n  width: ${(props) => (props.fixedWidth ? '180px' : '100%')};\r\n  background: ${(p) => p.color ? `linear-gradient(45deg, #286fff, #7aa9ff)` : \"radial-gradient(circle farthest-corner at center center, #286fff 0%, #397ad9 5%, #7aa9ff 90%, #7aa9ff 100%)\"};\r\n  color: #FFFFFF;\r\n  font-size: 1.1rem;\r\n  font-weight: 700;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : '1px solid #ccc')};  \r\n  border-radius: 8px;\r\n  padding: 13px 0;\r\n  cursor: pointer;\r\n  margin-top: 1rem;  // Increased top margin\r\n  max-width: 180px;\r\n  transition: all 0.3s ease-in-out;\r\n  position: relative;\r\n  outline: none;\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 20px #286fff, 0 0 30px #286fff, 0 0 34px #7aa9ff;  // Crisper glow on hover\r\n  }\r\n\r\n  &:active {\r\n    animation: ${clickAnimation} 0.1s forwards;  // Bevel effect on click\r\n  }\r\n\r\n  @media only screen and (max-width: 1025px) {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { validateProps } from \"../../common/types\";\r\n\r\ntype ValidateFunction = (values: validateProps) => validateProps;\r\n\r\ninterface UseFormReturn {\r\n  handleChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\r\n  handleSubmit: (event: React.ChangeEvent<HTMLFormElement>) => void;\r\n  values: validateProps;\r\n  errors: validateProps;\r\n  setValues: React.Dispatch<React.SetStateAction<validateProps>>;\r\n  setErrors: React.Dispatch<React.SetStateAction<validateProps>>;\r\n  toggleInputValues: { [key: string]: string };  // Add this line\r\n  setToggleInputValues: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>; \r\n}\r\n\r\nexport const useForm = (validate: ValidateFunction): UseFormReturn => {\r\n  const [values, setValues] = useState({\r\n    name: '',\r\n    message: '',\r\n    contactInfo: ''\r\n  });\r\n  const [errors, setErrors] = useState<validateProps>({\r\n    name: '',\r\n    message: '',\r\n    contactInfo: ''\r\n  });\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    \r\n    // Validate the contactInfo field\r\n    if (!values.contactInfo) {\r\n      setErrors((errors: validateProps) => ({ ...errors, contactInfo: \"At least one contact method is required\" }));\r\n    } else {\r\n      // If contactInfo is valid, validate the other fields\r\n      setErrors(validate(values));\r\n    }\r\n  \r\n    // Check if all fields have values\r\n    if (values.name && values.contactInfo && values.message) {\r\n      // Your url for API\r\n      const url = \"\";  // just a placeholder, you might want to replace or remove this\r\n      axios.post('https://droplet.marsbirds.art/form-submit', values)\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        })\r\n        .catch(error => {\r\n          if (error.response) {\r\n            console.error(\"Server responded with an error status:\", error.response.status);\r\n            console.error(\"Error data:\", error.response.data);\r\n          } else if (error.request) {\r\n            console.error(\"No response received from the server:\", error.request);\r\n          } else {\r\n            console.error(\"Error setting up the request:\", error.message);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const [toggleInputValues, setToggleInputValues] = useState<{ [key: string]: string }>({\r\n    Email: \"\",\r\n    Discord: \"\",\r\n    Twitter: \"\",\r\n    Phone: \"\",\r\n    Other: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues({\r\n        name: '',\r\n        message: '',\r\n        contactInfo: ''\r\n      });\r\n      setToggleInputValues({\r\n        Email: \"\",\r\n        Discord: \"\",\r\n        Twitter: \"\",\r\n        Phone: \"\",\r\n        Other: \"\"\r\n      });\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit, setToggleInputValues]);\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setValues((values) => ({\r\n      ...values,\r\n      [name]: value,\r\n    }));\r\n    \r\n    // Trigger validation for the changed input\r\n    const tempErrors = validate({ ...values, [name]: value });\r\n    setErrors((errors: validateProps) => ({\r\n      ...errors,\r\n      [name]: tempErrors[name] || \"\"  // Clear error if valid or set the new error\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n    setValues,\r\n    setErrors,\r\n    toggleInputValues,  // add this line if toggleInputValues is meant to be used outside of useForm\r\n    setToggleInputValues \r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  if (!values.contactInfo) {\r\n    errors.contactInfo = \"At least one contact method is required\";\r\n  }\r\n  \r\n  return errors;\r\n}\r\n","import { StyledButton } from \"./styles\";\r\nimport { ButtonProps } from \"../types\";\r\n\r\nexport const Button = ({\r\n  color,\r\n  children,\r\n  onClick,\r\n  glowing,\r\n  fixedWidth,\r\n}: ButtonProps) => (\r\n  <StyledButton color={color} onClick={onClick} glowing={glowing} fixedWidth={fixedWidth || false}>\r\n    {children}\r\n  </StyledButton>\r\n);","import styled, { css, keyframes } from \"styled-components\";\r\n\r\nconst neonGlow = keyframes`\r\n  0% {\r\n    text-shadow: \r\n      0 0 1px #98b9fd,\r\n      0 0 2px #286fff, \r\n      0 0 3px #286fff;\r\n  }\r\n  100% {\r\n    text-shadow: \r\n      0 0 2px #98b9fd,\r\n      0 0 4px #286fff, \r\n      0 0 6px #286fff;\r\n  }\r\n`;\r\n\r\ninterface TitleProps {\r\n  glowing: boolean;\r\n}\r\n\r\nexport const Title = styled(\"h6\")<TitleProps>`\r\n  font-size: 2.9em;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  height: auto;\r\n  width: auto;\r\n  padding-top: 1rem;\r\n  text-align: center;\r\n  color: #ffffff;\r\n  \r\n  // Apply the neon glow effect based on the 'glowing' prop\r\n  ${props => props.glowing && css`\r\n    color: #fff; // Optional: change the color when glowing\r\n    animation: ${neonGlow} 3s ease-in-out infinite alternate;\r\n  `}\r\n\r\n  &:hover {\r\n    color: rgb(40, 111, 255);\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n    margin-top: calc(1rem - 0.5vw);\r\n    margin-bottom: 1.5rem;\r\n    // Apply the neon glow effect for mobile screens\r\n    color: #fff;\r\n    text-shadow: \r\n      0 0 4px #fff, \r\n      0 0 10px #286fff,\r\n      0 0 20px #286fff;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  font-size: 1.5em;\r\n  line-height: 1.6em;\r\n  color: #707070;\r\n  height: auto;\r\n  margin-top: 0rem;\r\n  text-align: center;\r\n  margin-bottom: 1rem;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    width: 80vw;  /* using viewport width unit */\r\n    padding: 0 .9rem;\r\n  }\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n","// my-app\\src\\components\\Block\\index.tsx\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Title, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  glowing: boolean;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, glowing, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <Title glowing={glowing}>{t(title)}</Title>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\").attrs(props => ({\r\n  className: props.className,\r\n}))`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\").attrs(props => ({\r\n  className: props.className,\r\n}))`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n\r\n  border: 1px solid #ccc;\r\n  box-shadow: none;\r\n\r\n  &:focus {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    &:focus {\r\n      border: 2px solid #286fff;\r\n      box-shadow: 0 0 20px #286fff, 0 0 40px #286fff;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t, className }: InputProps & { className?: string }) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n      className={className}  // Forward className prop to StyledInput\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import styled, { keyframes, css } from \"styled-components\";\r\n\r\ninterface FormGroupProps {\r\n  glowing: boolean;\r\n}\r\n\r\ninterface ContactContainerProps {\r\n  glowing: boolean;\r\n}\r\n\r\ninterface TitleProps {\r\n  glowing: boolean;\r\n}\r\n\r\n// Define the keyframe animations for the neon glow\r\nconst neonGlow = keyframes`\r\n  0% {\r\n    text-shadow: \r\n      0 0 1px #98b9fd,\r\n      0 0 2px #286fff, \r\n      0 0 3px #286fff;\r\n  }\r\n  100% {\r\n    text-shadow: \r\n      0 0 2px #98b9fd,\r\n      0 0 4px #286fff, \r\n      0 0 6px #286fff;\r\n  }\r\n`;\r\n\r\nconst textNeonGlow = keyframes`\r\n  from {\r\n    text-shadow: \r\n      0 0 1px #98b9fd,\r\n      0 0 2px #286fff, \r\n      0 0 3px #286fff;\r\n  }\r\n  to {\r\n    text-shadow: \r\n      0 0 2px #98b9fd,\r\n      0 0 4px #286fff, \r\n      0 0 6px #286fff;\r\n  }\r\n`;\r\n\r\nexport const ContactContainer = styled(\"div\")<ContactContainerProps>`\r\n  padding: 1rem;\r\n  // border: ${(props) => (props.glowing ? '2px solid #286fff' : 'none')};\r\n  // box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n  transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n  margin-top: -10rem;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 2rem;\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: block;\r\n    margin-bottom: 0.5rem;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const FormGroup = styled.form<FormGroupProps>`\r\n  width: 80%;\r\n  max-width: 520px;\r\n  margin: auto;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : 'none')};\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n  transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    margin-top: 0rem;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n    width: 100%;\r\n  }\r\n  \r\n  @media only screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : 'none')};\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n  height: 0.5rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    text-align: center;\r\n    padding-top: 0.5rem;\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: 2.9em;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  color: #ffffff;\r\n  \r\n  // Apply the neon glow effect\r\n  animation: ${textNeonGlow} 1.5s ease-in-out infinite alternate;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    color: #286fff; // Apply blue color for smaller screens\r\n    text-shadow: \r\n      0 0 4px #fff, \r\n      0 0 10px #fff,\r\n      0 0 20px #286fff;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  font-size: clamp(1rem, calc(1rem + 0.5vw), 1.5rem);\r\n  line-height: 1.4em;\r\n  color: #2c2c2c;\r\n  height: 20em; \r\n  text-align: left;\r\n  \r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n    margin-bottom: calc(1rem + 1vw);\r\n  }\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  max-width: 700px;\r\n  \r\n  @media only screen and (max-width: 768px) {\r\n    padding: 0 .2rem;\r\n  }\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ImageContainer = styled(\"div\")`\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 0 1rem;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ToggleButton = styled.button<{ selected: boolean }>`\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: transparent;\r\n  color: ${(props) => (props.selected ? \"#fff\" : \"rgb(112, 112, 112)\")};\r\n  cursor: pointer;\r\n  margin-right: 5px;\r\n  font-weight: ${(props) => (props.selected ? \"bold\" : \"normal\")};\r\n  transition: color 0.3s ease-in-out;\r\n`;\r\n\r\nconst InputField = styled.input<{ glowing: boolean }>`\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 10px;\r\n  width: 100%;\r\n  background: transparent;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n  outline: none;\r\n\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : '1px solid #ccc')};\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 5px #286fff, 0 0 10px #286fff' : 'none')};\r\n\r\n  &:focus {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 5px #286fff, 0 0 10px #286fff;\r\n  }\r\n`;\r\n\r\ninterface ToggleableInputFieldProps {\r\n    onInputChange: (inputValues: { [key: string]: string }, isTabToggle: boolean) => void;\r\n    inputValues: { [key: string]: string };\r\n    setInputValues: React.Dispatch<React.SetStateAction<{ [key: string]: string }>>;\r\n    isGlowing: boolean;\r\n}\r\n  \r\nconst ToggleableInputField: React.FC<ToggleableInputFieldProps> = ({\r\n    onInputChange,\r\n    inputValues,\r\n    setInputValues,\r\n    isGlowing\r\n}) => {\r\n    const [selectedMethod, setSelectedMethod] = useState(\"Email\");\r\n\r\n  \r\n    const handleMethodToggle = (method: string, event: React.MouseEvent) => {\r\n      event.preventDefault();\r\n      setSelectedMethod(method);\r\n      onInputChange(inputValues, true);  \r\n      setInputValues({\r\n        ...inputValues,\r\n      });\r\n    };\r\n    \r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { value } = e.target;\r\n      const updatedValues = {\r\n        ...inputValues,\r\n        [selectedMethod]: value\r\n      };\r\n      setInputValues(updatedValues);\r\n      onInputChange(updatedValues, false);\r\n    };\r\n  \r\n    return (\r\n        <div>\r\n          <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap' }}>  {/* Updated styles */}\r\n            {[\"Email\", \"Discord\", \"Twitter\", \"Phone\", \"Other\"].map(method => (\r\n                <ToggleButton\r\n                    key={method}\r\n                    onClick={(event) => handleMethodToggle(method, event)}\r\n                    selected={selectedMethod === method}\r\n                    >\r\n                    {method}\r\n                </ToggleButton>\r\n            ))}\r\n          </div>\r\n          <InputField\r\n            type=\"text\"\r\n            name={selectedMethod.toLowerCase()}\r\n            placeholder={`Enter your ${selectedMethod}`}\r\n            value={inputValues[selectedMethod]}\r\n            onChange={handleInputChange}\r\n            glowing={isGlowing}\r\n          />\r\n        </div>\r\n      );\r\n  };\r\n  \r\n  export default ToggleableInputField;","// import { StyledTextArea } from \"../../common/TextArea/styles\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\n// import TextArea from \"../../common/TextArea\";\r\nimport { FormGroup, Span, ButtonContainer, Title } from \"./styles\";\r\nimport ScrollDirectionButton from \"../../components/ScrollDirectionButton\";\r\nimport styled from \"styled-components\";\r\nimport ToggleableInputField from \"../ToggleableInputField\";\r\nimport { validateProps } from \"../../common/types\";\r\n\r\ninterface ContactContainerProps {\r\n  glowing: boolean;\r\n}\r\n\r\nexport const ContactContainer = styled(\"div\")<ContactContainerProps>`\r\n  padding: 1rem;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : 'none')};\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n  transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n  margin-top: 2rem;\r\n  border-radius: 8px;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 2rem;\r\n  }\r\n`;\r\n\r\n// Define the GlowingTextArea styled component\r\nexport const GlowingTextArea = styled.textarea<{ glowing: boolean }>`\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : '1px solid #ccc')};\r\n  width: 100%;\r\n  background: #1c1c1c;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n  outline: none;\r\n\r\n  &:focus {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 20px #286fff, 0 0 40px #286fff;  // Brighter glow when focused\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;  // Dimmer glow when not focused\r\n  }\r\n`;\r\n\r\n// Define the GlowingInput styled component\r\nexport const GlowingInput = styled(Input)<{ glowing: boolean }>`\r\n  padding: 10px;\r\n  line-height: 2;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  border: ${(props) => (props.glowing ? '2px solid #286fff' : '1px solid #ccc')};\r\n  box-shadow: ${(props) => (props.glowing ? '0 0 5px #286fff, 0 0 10px #286fff' : 'none')};\r\n  transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n  background: #1c1c1c;\r\n  color: #fff;\r\n  font-weight: bold;\r\n\r\n  &:focus {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 10px #286fff, 0 0 20px #286fff;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    border: 2px solid #286fff;\r\n    box-shadow: 0 0 5px #286fff, 0 0 10px #286fff;\r\n  }\r\n`;\r\n\r\nexport const GlowingTextAreaContainer = styled(\"div\")<{ glowing: boolean }>`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n  // border: ${(props) => (props.glowing ? '2px solid #286fff' : '1px solid #ccc')};\r\n  // box-shadow: ${(props) => (props.glowing ? '0 0 10px #286fff, 0 0 20px #286fff' : 'none')};\r\n  // transition: box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;\r\n`;\r\n\r\ninterface GlowingTextAreaProps {\r\n  glowing: boolean;\r\n  placeholder: string;\r\n  value: string;\r\n  name: string;\r\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n}\r\n\r\n// Define the Label styled component\r\nconst Label = styled.label`\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst GlowingTextAreaWithLabel: React.FC<GlowingTextAreaProps> = ({\r\n  glowing,\r\n  placeholder,\r\n  value,\r\n  name,\r\n  onChange,\r\n}) => (\r\n  <GlowingTextAreaContainer glowing={glowing}>\r\n    <Label htmlFor={name}>Message</Label>\r\n    <GlowingTextArea\r\n      glowing={glowing}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </GlowingTextAreaContainer>\r\n);\r\n\r\n\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit, setValues, setErrors } = useForm(validate);\r\n  const [glowing, setGlowing] = useState(false);\r\n\r\n  const [toggleInputValues, setToggleInputValues] = useState<{ [key: string]: string }>({\r\n    Email: \"\",\r\n    Discord: \"\",\r\n    Twitter: \"\",\r\n    Phone: \"\",\r\n    Other: \"\"\r\n  });\r\n  \r\n    useEffect(() => {\r\n      const isMobile = window.innerWidth <= 768;\r\n      const threshold = isMobile ? 0.3 : 0.1;\r\n\r\n      const observer = new IntersectionObserver(\r\n        ([entry]) => {\r\n          if (entry.isIntersecting) {\r\n            setTimeout(() => {\r\n              setGlowing(true);\r\n            }, 1500);  // Delay of 1.5 seconds\r\n          } else {\r\n            setGlowing(false);\r\n          }\r\n        },\r\n       { threshold }\r\n      );\r\n    const contactContainer = document.getElementById(id);\r\n    if (contactContainer) {\r\n      observer.observe(contactContainer);\r\n    }\r\n    return () => {\r\n      if (contactContainer) {\r\n        observer.unobserve(contactContainer);\r\n      }\r\n    };\r\n  }, [id]);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span errors={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  const handleToggleableInputChange = (inputValues: { [key: string]: string }, _isTabToggle: boolean) => {\r\n    const updatedValues = {\r\n      ...values,\r\n      contactInfo: Object.values(inputValues).join(\" \"),\r\n    };\r\n    \r\n    const tempErrors = validate(updatedValues);\r\n    setErrors((prevErrors: validateProps) => ({\r\n      ...prevErrors,\r\n      contactInfo: tempErrors.contactInfo || \"\"\r\n    }));\r\n  \r\n    setValues(updatedValues);\r\n  };\r\n  \r\n\r\n  return (\r\n    <ContactContainer id={id} glowing={glowing}>\r\n      <ScrollDirectionButton />\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col lg={10} md={9} sm={20} xs={20} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} glowing={glowing} />\r\n            <div className=\"image-container\" style={{ maxWidth: '100%', margin: '0rem' }}>\r\n              {/* Replace the img tag with a video tag */}\r\n              <video \r\n                autoPlay \r\n                loop \r\n                muted \r\n                playsInline \r\n                style={{ width: '100%' }} \r\n                src=\"/img/video/tv-screen.webm\"\r\n              >\r\n                <source src=\"/img/video/tv-screen.webm\" type=\"video/webm\" />\r\n                Your browser does not support the video tag.\r\n              </video>\r\n            </div>\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n          <FormGroup autoComplete=\"off\" onSubmit={handleSubmit} id=\"contact-form\" glowing={false}>\r\n              <Col span={24}>\r\n              <GlowingInput\r\n                  glowing={glowing}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"State Your Alias\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <ToggleableInputField\r\n                  onInputChange={handleToggleableInputChange}\r\n                  inputValues={toggleInputValues}\r\n                  setInputValues={setToggleInputValues} \r\n                  isGlowing={glowing}\r\n                />\r\n                <ValidationType type=\"contactInfo\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <GlowingTextAreaWithLabel\r\n                  glowing={glowing}\r\n                  placeholder=\"What’s the Proposition?\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer className=\"button-container\">\r\n                <Button name=\"submit\" glowing={glowing}>{t(\"Dispatch Message\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);"],"names":["clickAnimation","keyframes","_templateObject","_taggedTemplateLiteral","StyledButton","styled","_templateObject2","props","fixedWidth","p","color","glowing","useForm","validate","_useState","useState","name","message","contactInfo","_useState2","_slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","shouldSubmit","setShouldSubmit","_useState7","Email","Discord","Twitter","Phone","Other","_useState8","toggleInputValues","setToggleInputValues","useEffect","Object","keys","length","notification","description","handleChange","event","persist","_event$target","target","value","_objectSpread","_defineProperty","tempErrors","handleSubmit","preventDefault","axios","then","catch","error","response","console","status","data","request","Button","_ref","children","onClick","_jsx","neonGlow","Title","css","_templateObject3","Content","_templateObject4","Container","_templateObject5","TextWrapper","_templateObject6","withTranslation","title","content","t","_jsxs","StyledInput","attrs","className","Label","placeholder","onChange","htmlFor","id","textNeonGlow","FormGroup","label","form","Span","ButtonContainer","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","ToggleButton","button","selected","InputField","input","onInputChange","inputValues","setInputValues","isGlowing","selectedMethod","setSelectedMethod","style","display","justifyContent","flexWrap","map","method","handleMethodToggle","type","toLowerCase","concat","e","updatedValues","ContactContainer","GlowingTextArea","textarea","GlowingInput","Input","GlowingTextAreaContainer","GlowingTextAreaWithLabel","_ref2","_useForm","setGlowing","isMobile","window","innerWidth","observer","IntersectionObserver","_ref3","isIntersecting","setTimeout","threshold","contactContainer","document","getElementById","observe","unobserve","ValidationType","_ref5","ErrorMessage","Zoom","direction","ScrollDirectionButton","Row","justify","align","Col","lg","md","sm","xs","flexDirection","alignItems","Slide","Block","maxWidth","margin","autoPlay","loop","muted","playsInline","width","src","autoComplete","onSubmit","span","ToggleableInputField","_isTabToggle","join","prevErrors"],"sourceRoot":""}