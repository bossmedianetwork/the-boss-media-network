{"version":3,"file":"static/js/609.de155402.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = \"\";\r\n    if (Object.keys(values).length === 3) {\r\n      axios.post('https://droplet.marsbirds.art/form-submit', values)\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        })\r\n        .catch(error => {\r\n          if (error.response) {\r\n            console.error(\"Server responded with an error status:\", error.response.status);\r\n            console.error(\"Error data:\", error.response.data);\r\n          } else if (error.request) {\r\n            console.error(\"No response received from the server:\", error.request);\r\n          } else {\r\n            console.error(\"Error setting up the request:\", error.message);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: 2.9em;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  height: auto;\r\n  width: auto;\r\n  padding-top: 0rem;\r\n  text-align: center;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    margin-top: -5rem;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  font-size: 1.5em;\r\n  line-height: 1.6em;\r\n  color: #707070;\r\n  height: auto;\r\n  margin-top: 0rem;\r\n  text-align: left;\r\n  margin-bottom: 1rem;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n    margin-bottom: 5rem;\r\n  }\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    padding: 0 0rem;\r\n  }\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Title, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <Title>{t(title)}</Title>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 0rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 2rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 80%;\r\n  max-width: 520px;\r\n  margin: auto;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    margin-top: 1rem;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: #4E4E4E;\r\n  height: 0.5rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    text-align: center;\r\n    padding-top: 0.5rem;\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.5rem, 2.2vw, 22px);\r\n  line-height: 1.2em;\r\n  font-weight: bold;\r\n  text-align: left;\r\n  \r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n    margin-top: calc(-1rem - 1.5vw);\r\n    margin-bottom: 3rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  font-size: clamp(1rem, calc(1rem + 0.5vw), 1.5rem);\r\n  line-height: 1.4em;\r\n  color: #707070;\r\n  height: 20em; \r\n  text-align: left;\r\n  \r\n  @media only screen and (max-width: 768px) {\r\n    text-align: center;\r\n    margin-bottom: calc(1rem + 1vw);\r\n  }\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  max-width: 700px;\r\n  \r\n  @media only screen and (max-width: 768px) {\r\n    padding: 0 .2rem;\r\n  }\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ImageContainer = styled(\"div\")`\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 0 1rem;\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"center\" align=\"middle\">\r\n        <Col lg={10} md={9} sm={20} xs={20} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n            <div className=\"image-container\" style={{ maxWidth: '100%', margin: '0rem' }}>\r\n              <img src=\"/img/svg/contactform.svg\" alt=\"Contact Form Illustration\" style={{ width: '100%' }} />\r\n            </div>\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"State Your Alias\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Where Should We Forward the Reply?\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"What’s the Proposition?\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Dispatch Message\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["useForm","validate","_useState","useState","_useState2","_slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","_objectSpread","_defineProperty","target","name","value","handleSubmit","preventDefault","axios","then","catch","error","response","console","status","data","request","email","test","Title","styled","_templateObject","_taggedTemplateLiteral","Content","_templateObject2","Container","_templateObject3","TextWrapper","_templateObject4","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_ref2","ValidationType","_ref3","type","ErrorMessage","Zoom","direction","erros","Row","justify","align","Col","lg","md","sm","xs","style","display","flexDirection","alignItems","Slide","Block","className","maxWidth","margin","src","alt","width","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}