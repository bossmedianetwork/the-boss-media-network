{"version":3,"file":"static/js/20.8d259ac4.chunk.js","mappings":"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","sources":["components/MiddleBlock/styles.tsx","components/VideoBackgroundSports/styles.tsx","components/VideoBackgroundSports/index.tsx"],"sourcesContent":["import styled, { css, keyframes } from \"styled-components\";\r\n\r\n// Keyframes for word animation\r\nexport const fadeInUp = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n// Keyframes for image slide-in on desktop and up on mobile\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideInUp = keyframes`\r\n  from {\r\n    transform: translateY(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    visibility: hidden;\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    visibility: visible;\r\n    opacity: .9;\r\n  }\r\n`;\r\n\r\n// Define the StyledMiddleBlock with rounded corners and visibility hidden initially\r\n// Define the StyledMiddleBlock with visibility controlled by isVisible\r\nexport const StyledMiddleBlock = styled.section<{ isVisible: boolean }>`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  border-radius: 20px;\r\n  visibility: hidden;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  min-height: 600px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n  animation: ${props => props.isVisible ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n`;\r\n\r\n// Update GreyArea for the glowing effect\r\nexport const GreyArea = styled.div<{ isVisible: boolean }>`\r\n  background-color: #1c1c1c;\r\n  padding: 2rem;\r\n  margin-top: 2rem;\r\n  border-radius: 12px;\r\n  border: 2px solid #ccc;\r\n  box-shadow: 0 0 10px rgba(255, 255, 255, 0.2),\r\n               0 0 20px rgba(255, 255, 255, 0.2),\r\n               0 0 30px rgba(255, 255, 255, 0.2);\r\n  visibility: hidden;\r\n  animation: ${props => props.isVisible ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n`;\r\n\r\n\r\nexport const StyledButton = styled.button<{ animationsFinished: boolean }>`\r\n  padding: 10px 20px;\r\n  background-color: #ff2d2d; // A bright red background\r\n  color: white; // Text color\r\n  font-size: 1em; // Adjust font size as needed\r\n  border: none;\r\n  border-radius: 4px; // Adjust border-radius as needed\r\n  cursor: pointer;\r\n  outline: none;\r\n  transition: all 0.3s ease-in-out;\r\n  position: relative;\r\n  z-index: 2;\r\n  overflow: hidden;\r\n  visibility: ${props => props.animationsFinished ? 'visible' : 'hidden'};\r\n  animation: ${props => props.animationsFinished ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n\r\n  // Neon glow effect\r\n  box-shadow: \r\n    0 0 5px #ff2d2d, // Red glow\r\n    0 0 15px #ff2d2d, // Stronger red glow\r\n    0 0 30px #ff69b4, // Pink glow\r\n    0 0 45px #ff69b4, // Stronger pink glow\r\n\r\n  // Text glow effect on hover\r\n  &:hover {\r\n    box-shadow: \r\n      0 0 10px #ffffff, // White glow\r\n      0 0 20px #fff, // Pink glow\r\n      0 0 30px #fff, // Stronger pink glow\r\n    color: #ff69b4; // Change text color to pink on hover\r\n  }\r\n\r\n  // Fallback for browsers that do not support the glow effect\r\n  &:focus {\r\n    background-color: #ff2d2d;\r\n    color: white;\r\n  }\r\n\r\n  // Add media queries if you need to adjust the sizes on different screen sizes\r\n`;\r\n\r\n// Helper function to generate delays\r\nconst generateDelay = (index: number, baseDelay = 0.05) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const MiddleBlockSection = styled.section<{ isVisible: boolean }>`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px;\r\n  min-height: 600px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n  // The animation is applied based on the isVisible prop\r\n  animation: ${props => props.isVisible ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.5rem, 5vw, 20em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 1.5px #ffffff;\r\n  text-align: center; // Center the text horizontally\r\n  margin: 0 auto; // Center the title element itself\r\n  width: 100%; // Take the full width of its container\r\n  white-space: nowrap; // Prevent text wrapping\r\n  position: relative; // Positioned relative to its parent\r\n  margin-top: 5rem;\r\n\r\n  .word {\r\n    display: inline-block;\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n`;\r\n\r\nexport const Content = styled(\"div\")`\r\n  padding: clamp(0rem, 0vw, 0rem) 0;\r\n  font-size: clamp(1rem, 2.5vw, 1.5em);\r\n  .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards;\r\n  }\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)};\r\n    }\r\n  `)}\r\n\r\n  .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.08s ease forwards;\r\n  }\r\n\r\n  // Generate dynamic delays for each letter\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.01)}; // You can adjust the delay as needed\r\n    }\r\n  `)}\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 0 1rem;\r\n    margin-top: 0em;\r\n  }\r\n  // Increase paragraph font size and align text to the left on desktop\r\n  @media only screen and (min-width: 1024px) {\r\n    font-size: 1.5em !important; // Adjust font size as needed for desktop\r\n    text-align: left;\r\n  }\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  max-width: 1200px;\r\n  width: 90%;\r\n  margin: auto;\r\n  gap: 2rem; // Add this line to create a margin between the left and right sections\r\n  @media only screen and (max-width: 768px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const ImageWrapper = styled.div<{ isVisible: boolean }>`\r\n  animation: ${slideInLeft} 1s ease forwards;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  animation: ${props => props.isVisible ? css`${slideInLeft} 1s ease forwards` : 'none'};\r\n\r\n  .intro-video {\r\n    width: 100%; // Make the video responsive and cover the available width\r\n    height: auto; // Maintain aspect ratio\r\n    max-width: clamp(250px, 50vw, 500px); // Limit the width on larger screens\r\n  }\r\n\r\n  // Specific media query for the troublesome range\r\n  @media only screen and (min-width: 765px) and (max-width: 980px) {\r\n    .intro-video {\r\n      max-height: 100%; // Ensure it does not exceed the container's height\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    animation: ${slideInUp} 1s ease forwards;\r\n    .intro-video {\r\n      max-width: 300px; // Decrease the size for mobile devices\r\n    }\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    order: -1; // This will move the ImageWrapper above the content if flex-direction is column\r\n    width: 100%; // Adjust the width as needed to center the video\r\n    margin-bottom: -2rem; // Add some space below the video\r\n    margin-top: 2rem;\r\n  }\r\n`;","import styled, { css, keyframes } from 'styled-components';\r\nimport { fadeInUp } from '../MiddleBlock/styles'; // Import only fadeInUp if it's being used here\r\n\r\n// Define the keyframes directly in this file if they're unique to VideoBackground\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(-100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Define your generateDelay function\r\nconst generateDelay = (index: number, baseDelay = 0.8) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const VideoContainer = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 100vw;\r\n  height: 500px;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px; // Default margin for desktop\r\n\r\n  // Add a media query for mobile devices\r\n  @media only screen and (max-width: 768px) {\r\n    margin-bottom: -220px; // Smaller margin for mobile devices\r\n  }\r\n\r\n  // If needed, add another media query for tablets or other specific sizes\r\n  @media only screen and (min-width: 769px) and (max-width: 1024px) {\r\n    margin-bottom: -150px; // If you want a different margin for tablets\r\n  }\r\n`;\r\n\r\nexport const Video = styled.video`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  z-index: -100;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n`;\r\n\r\nexport const OverlayText = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 100;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    top: 23%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.3rem, 4vw, 4em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 1px #0048b2;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  margin-top: 0em;\r\n\r\n  .word {\r\n    display: inline-block;\r\n    opacity: 0;\r\n  }\r\n\r\n  &.inView .word {\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n\r\n  // Styles for screens larger than 1024px\r\n  @media only screen and (min-width: 1024px) {\r\n    text-align: left;\r\n    // You might want to adjust margin-top here if needed for larger screens\r\n  }\r\n\r\n  // Styles for screens between 768px and 1024px\r\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\r\n    margin-bottom: .2em; // Sets the top margin to 1em for tablet devices\r\n  }\r\n\r\n  // Styles for screens up to 768px\r\n  @media only screen and (max-width: 768px) {\r\n    font-size: 1.5em; // Adjust this value as needed\r\n    text-align: center; // Keep text aligned at center on smaller screens\r\n    margin-bottom: .4em; // Spacing below the title for smaller screens\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"div\")`\r\n  padding: clamp(0.5rem, 2vw, 1rem) 0;\r\n  font-size: clamp(1rem, 2.5vw, 1.5em);\r\n\r\n  &.inView .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards; /* Increased duration */\r\n  }\r\n\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)}; /* Increased delay for each paragraph */\r\n    }\r\n  `)}\r\n\r\n  &.inView .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.5s ease forwards; /* Increased duration */\r\n  }\r\n\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.5)}; /* Adjusted delay for each letter */\r\n    }\r\n  `)}\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;","import React from 'react';\r\nimport { VideoContainer, Video } from './styles';\r\n\r\ninterface VideoBackgroundSportsProps {\r\n  videoSrc: string;\r\n}\r\n\r\nconst VideoBackgroundSports: React.FC<VideoBackgroundSportsProps> = ({ videoSrc }) => {\r\n  return (\r\n    <VideoContainer>\r\n      <Video autoPlay loop muted>\r\n        <source src={videoSrc} type=\"video/mp4\" />\r\n        Your browser does not support the video tag.\r\n      </Video>\r\n    </VideoContainer>\r\n  );\r\n};\r\n\r\nexport default VideoBackgroundSports;"],"names":["fadeInUp","keyframes","_templateObject","_taggedTemplateLiteral","slideInLeft","_templateObject2","slideInUp","_templateObject3","fadeInLetters","_templateObject4","fadeIn","_templateObject5","GreyArea","styled","section","_templateObject6","props","isVisible","css","_templateObject7","div","_templateObject8","_templateObject9","generateDelay","button","_templateObject10","animationsFinished","_templateObject11","index","baseDelay","arguments","length","undefined","_templateObject12","MiddleBlockSection","_templateObject13","_templateObject14","Title","_templateObject15","Array","from","_","_templateObject16","Content","_templateObject17","_templateObject18","_templateObject19","ContentWrapper","_templateObject20","ImageWrapper","_templateObject21","_templateObject22","VideoContainer","Video","video","_ref","videoSrc","_jsx","children","_jsxs","autoPlay","loop","muted","src","type"],"sourceRoot":""}