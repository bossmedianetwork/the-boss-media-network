{"version":3,"file":"static/js/692.15ed4293.chunk.js","mappings":"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","sources":["common/utils/textAnimations.tsx","components/MiddleBlock/styles.tsx","components/VideoBackground/styles.tsx","components/VideoBackground/index.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\r\n\r\n// my-app/src/common/utils/textAnimations.tsx\r\n\r\nexport const splitTitleIntoWords = (title: string) => {\r\n  return title.split(' ').map((word, index) => (\r\n    <React.Fragment key={index}>\r\n      <span className={`word word-${index}`}>{word}</span>{' '}\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\nexport const wrapParagraphs = (text: string): ReactElement[] => {\r\n  let wordIndex = 0;\r\n  let elements: ReactElement[] = [];\r\n  const words = text.split(' ');\r\n\r\n  words.forEach((word, wordIdx) => {\r\n    const parts = word.split('\\n');\r\n    parts.forEach((part, partIdx) => {\r\n      if (partIdx > 0) {\r\n        elements.push(<br key={`br-${wordIndex}`} />);\r\n        wordIndex++;\r\n      }\r\n      if (part) {\r\n        // Check if the part ends with a colon and merge it with the next word\r\n        let modifiedPart = part;\r\n        let nextPart = wordIdx < words.length - 1 ? words[wordIdx + 1] : \"\";\r\n        if (part.endsWith(':') && nextPart) {\r\n          modifiedPart += nextPart;\r\n          words[wordIdx + 1] = \"\"; // Empty the next word as it has been merged\r\n        }\r\n        \r\n        const className = ['Film Industry Expertise', 'Musical Legacy', 'Physical Health & Science Expertise', 'Our Impact'].includes(modifiedPart) ? 'underline' : '';\r\n        elements.push(\r\n          <span key={`part-${wordIndex}`} className={`letter letter-${wordIndex} ${className}`}>\r\n            {modifiedPart}\r\n          </span>\r\n        );\r\n        wordIndex++;\r\n      }\r\n    });\r\n    if (wordIdx < words.length - 1) {\r\n      elements.push(\r\n        <span key={`space-${wordIndex}`} className=\"letter\">\r\n          &nbsp;\r\n        </span>\r\n      );\r\n      wordIndex++;\r\n    }\r\n  });\r\n\r\n  return elements;\r\n};","import styled, { css, keyframes } from \"styled-components\";\r\n\r\n// Keyframes for word animation\r\nexport const fadeInUp = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst neonGlow = keyframes`\r\n  0% {\r\n    box-shadow: \r\n      0 0 4px #98b9fd,\r\n      0 0 12px #286fff, \r\n      0 0 30px #286fff;\r\n  }\r\n  100% {\r\n    box-shadow: \r\n      0 0 10px #98b9fd,\r\n      0 0 16px #286fff, \r\n      0 0 32px #286fff;\r\n  }\r\n`;\r\n\r\nconst textNeonGlow = keyframes`\r\n  from {\r\n    text-shadow: \r\n      0 0 1px #fff,\r\n      0 0 2px #286fff, \r\n      0 0 3px #286fff;\r\n  }\r\n  to {\r\n    text-shadow: \r\n      0 0 2px #fff,\r\n      0 0 6px #286fff, \r\n      0 0 8px #286fff;\r\n  }\r\n`;\r\n\r\n// Keyframes for image slide-in on desktop and up on mobile\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideInUp = keyframes`\r\n  from {\r\n    transform: translateY(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst slideInRight = keyframes`\r\n  from {\r\n    transform: translateX(-100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    visibility: hidden;\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    visibility: visible;\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n// Define the StyledMiddleBlock with rounded corners and visibility hidden initially\r\n// Define the StyledMiddleBlock with visibility controlled by isVisible\r\nexport const StyledMiddleBlock = styled.section<{ isVisible: boolean }>`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  border-radius: 20px;\r\n  visibility: hidden;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  min-height: 600px;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100%;\r\n    background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(28, 28, 28, 0.9); // Dark gray overlay with 20% opacity\r\n    z-index: -2; // Ensure it's under the background image\r\n    border-radius: 20px; // Match the border-radius of the section\r\n  }\r\n\r\n  animation: ${props => props.isVisible ? css`${fadeIn} 2s ease forwards, ${slideInLeft} 1s ease forwards, ${neonGlow} 1.5s ease-in-out infinite alternate` : 'none'};\r\n`;\r\n\r\n// Update GreyArea for the glowing effect\r\nexport const GreyArea = styled.div<{ isVisible: boolean }>`\r\n  background-color: #000000;\r\n  padding: 1rem;\r\n  margin-top: 2rem;\r\n  border-radius: 12px;\r\n  border: 2px solid #ccc;\r\n  box-shadow: 0 0 4px rgba(255, 255, 255, 0.2),\r\n               0 0 12px rgba(255, 255, 255, 0.2),\r\n               0 0 20px rgba(255, 255, 255, 0.2);\r\n  visibility: hidden;\r\n\r\n  // Apply the neon glow animation\r\n  animation: ${props => props.isVisible ? css`${fadeIn} 2s ease forwards, ${slideInRight} 1s ease forwards, ${neonGlow} 1.5s ease-in-out infinite alternate` : 'none'};\r\n`;\r\n\r\n\r\nexport const StyledButton = styled.button<{ animationsFinished: boolean }>`\r\n  padding: 10px 20px;\r\n  background-color: #ff2d2d;\r\n  color: white; // Text color\r\n  font-size: 1.2em;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  outline: none;\r\n  transition: all 0.3s ease-in-out;\r\n  position: relative;\r\n  z-index: 2;\r\n  overflow: hidden;\r\n  visibility: ${props => props.animationsFinished ? 'visible' : 'hidden'};\r\n  animation: ${props => props.animationsFinished ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n\r\n  // Neon glow effect\r\n  box-shadow: \r\n    0 0 5px #ff2d2d,\r\n    0 0 15px #ff2d2d,\r\n    0 0 30px #ff69b4,\r\n    0 0 45px #ff69b4,\r\n\r\n  // Text glow effect on hover\r\n  &:hover {\r\n    box-shadow: \r\n      0 0 10px #ffffff,\r\n      0 0 20px #fff,\r\n      0 0 30px #fff,\r\n    color: #ff69b4;\r\n  }\r\n\r\n  // Fallback for browsers that do not support the glow effect\r\n  &:focus {\r\n    background-color: #ff2d2d;\r\n    color: white;\r\n  }\r\n\r\n  // Add media queries if you need to adjust the sizes on different screen sizes\r\n`;\r\n\r\n// Helper function to generate delays\r\nconst generateDelay = (index: number, baseDelay = 0.05) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const MiddleBlockSection = styled.section<{ isVisible: boolean }>`\r\n  position: relative;\r\n  padding: 1.5rem 0 3rem;\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px;\r\n  min-height: 600px;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    // background: url('/img/svg/middleblock-bg.svg') no-repeat center center;\r\n    background-size: cover;\r\n    z-index: -1;\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(28, 28, 28, 0.9);\r\n    z-index: -2; // Ensure it's under the background image\r\n  }\r\n\r\n  // The animation is applied based on the isVisible prop\r\n  animation: ${props => props.isVisible ? css`${fadeIn} 2s ease forwards` : 'none'};\r\n`;\r\n\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.2rem, 2.4vw, 10em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 1.5px #ffffff;\r\n  padding-left: 1rem;\r\n  text-align: center;\r\n  margin: 0 0;\r\n  width: 100%;\r\n  white-space: nowrap;\r\n  position: relative;\r\n  margin-top: 5rem;\r\n  animation: ${textNeonGlow} 3s ease-in-out infinite alternate;\r\n\r\n  .word {\r\n    display: inline-block;\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n\r\n  &:hover {\r\n    background: none; // Remove gradient background on hover\r\n    -webkit-text-fill-color: initial; // Reset text color\r\n    color: rgb(40, 111, 255); // Apply blue color on hover\r\n    text-shadow: none; // Optionally, remove text shadow on hover\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"div\")`\r\n  padding: clamp(0rem, 0vw, 0rem) 0;\r\n  font-size: clamp(.85rem, 2.5vw, 1.5em);\r\n\r\n  .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards;\r\n  }\r\n\r\n  // Apply delayed animations to each paragraph\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)};\r\n    }\r\n  `)}\r\n\r\n  .subtitle {\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    font-size: 1.1em; // Adjusted font size\r\n    margin-bottom: 0.3rem;\r\n    color: #FFFFFF; // Default color\r\n    animation: ${textNeonGlow} 4s ease-in-out infinite alternate;\r\n\r\n    &:hover {\r\n      color: rgb(40, 111, 255); // Blue hover color\r\n    }\r\n  }\r\n\r\n  \r\n  .underline {\r\n    // text-decoration: underline;\r\n    font-size: 1.3em; // Default font size for larger screens\r\n    color: #FFFFFF; // Default color\r\n  \r\n    animation: ${neonGlow} 1.5s ease-in-out infinite alternate;\r\n  \r\n    @media only screen and (max-width: 768px) {\r\n      font-size: 1.1em; // Smaller font size for mobile screens\r\n      color: #286fff; // Apply blue color for mobile screens\r\n    }\r\n  \r\n    &:hover {\r\n      color: rgb(40, 111, 255); // Blue hover color\r\n    }\r\n  }\r\n\r\n  .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.08s ease forwards;\r\n  }\r\n\r\n  // Apply dynamic delays for each letter\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.01)};\r\n    }\r\n  `)}\r\n\r\n  // Styles for mobile screens\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 0 1rem;\r\n    margin-top: 0em;\r\n  }\r\n\r\n  // Styles for desktop and larger screens\r\n  @media only screen and (min-width: 1024px) {\r\n    font-size: 1.2em !important; // Larger font size for desktop\r\n    text-align: left; // Align text to the left on larger screens\r\n    item-align: center;\r\n  }\r\n`;\r\n\r\nexport const Subtitle = styled(\"h2\")`\r\n  font-size: 1.4em;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  color: #fff;\r\n  margin: 1rem 0;\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  max-width: 1300px;\r\n  width: 90%;\r\n  margin: auto;\r\n  gap: 2rem; // Add this line to create a margin between the left and right sections\r\n  @media only screen and (max-width: 768px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    flex-direction: column-reverse;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const ImageWrapper = styled.div<{ isVisible: boolean }>`\r\n  animation: ${slideInLeft} 1s ease forwards;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  animation: ${props => props.isVisible ? css`${slideInLeft} 1s ease forwards` : 'none'};\r\n\r\n  .intro-video {\r\n    width: 100%; // Make the video responsive and cover the available width\r\n    height: auto; // Maintain aspect ratio\r\n    max-width: clamp(250px, 50vw, 500px); // Limit the width on larger screens\r\n  }\r\n\r\n  // Specific media query for the troublesome range\r\n  @media only screen and (min-width: 765px) and (max-width: 980px) {\r\n    .intro-video {\r\n      max-height: 100%; // Ensure it does not exceed the container's height\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    animation: ${slideInUp} 1s ease forwards;\r\n    .intro-video {\r\n      max-width: 300px; // Decrease the size for mobile devices\r\n    }\r\n  }\r\n  @media only screen and (max-width: 993px) {\r\n    order: -1; // This will move the ImageWrapper above the content if flex-direction is column\r\n    width: 100%; // Adjust the width as needed to center the video\r\n    margin-bottom: -2rem; // Add some space below the video\r\n    margin-top: 2rem;\r\n  }\r\n`;","import styled, { css, keyframes } from 'styled-components';\r\nimport { fadeInUp } from '../MiddleBlock/styles'; // Import only fadeInUp if it's being used here\r\n\r\n// Define the keyframes directly in this file if they're unique to VideoBackground\r\nconst slideInLeft = keyframes`\r\n  from {\r\n    transform: translateX(-100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst fadeInLetters = keyframes`\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Define your generateDelay function\r\nconst generateDelay = (index: number, baseDelay = 0.8) => css`\r\n  animation-delay: ${index * baseDelay}s;\r\n`;\r\n\r\nexport const VideoContainer = styled.div`\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 100vw;\r\n  height: 500px;\r\n  margin-left: calc(-50vw + 50%);\r\n  margin-bottom: 50px; // Default margin for desktop\r\n\r\n  // Add a media query for mobile devices\r\n  @media only screen and (max-width: 768px) {\r\n    margin-bottom: -220px; // Smaller margin for mobile devices\r\n  }\r\n\r\n  // If needed, add another media query for tablets or other specific sizes\r\n  @media only screen and (min-width: 769px) and (max-width: 1024px) {\r\n    margin-bottom: -150px; // If you want a different margin for tablets\r\n  }\r\n`;\r\n\r\nexport const Video = styled.video`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  z-index: -100;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n`;\r\n\r\nexport const OverlayText = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 100;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    top: 23%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n`;\r\n\r\nexport const Title = styled(\"h6\")`\r\n  font-size: clamp(1.3rem, 4vw, 4em);\r\n  font-weight: bold;\r\n  background: -webkit-linear-gradient(right, #ffffff, #ffffff);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  text-shadow: 0 0 1px #0048b2;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  margin-top: 0em;\r\n\r\n  .word {\r\n    display: inline-block;\r\n    opacity: 0;\r\n  }\r\n\r\n  &.inView .word {\r\n    animation: ${fadeInUp} 1.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 50 }, (_, index) => css`\r\n    .word-${index} {\r\n      ${generateDelay(index)};\r\n    }\r\n  `)}\r\n\r\n  // Styles for screens larger than 1024px\r\n  @media only screen and (min-width: 1024px) {\r\n    text-align: left;\r\n    // You might want to adjust margin-top here if needed for larger screens\r\n  }\r\n\r\n  // Styles for screens between 768px and 1024px\r\n  @media only screen and (min-width: 768px) and (max-width: 1024px) {\r\n    margin-bottom: .2em; // Sets the top margin to 1em for tablet devices\r\n  }\r\n\r\n  // Styles for screens up to 768px\r\n  @media only screen and (max-width: 768px) {\r\n    font-size: 1.3em; // Adjust this value as needed\r\n    text-align: center; // Keep text aligned at center on smaller screens\r\n    margin-bottom: .5em; // Spacing below the title for smaller screens\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: clamp(0.5rem, 2vw, 1rem) 0;\r\n  font-size: clamp(1rem, 2.5vw, 1.5em);\r\n\r\n  &.inView .paragraph {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${slideInLeft} 2s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 10 }, (_, index) => css`\r\n    .paragraph-${index} {\r\n      ${generateDelay(index, 2)};\r\n    }\r\n  `)}\r\n\r\n  &.inView .letter {\r\n    display: inline-block;\r\n    opacity: 0;\r\n    animation: ${fadeInLetters} 0.5s ease forwards;\r\n  }\r\n\r\n  ${Array.from({ length: 400 }, (_, index) => css`\r\n    .letter-${index} {\r\n      ${generateDelay(index, 0.5)};\r\n    }\r\n  `)}\r\n\r\n  // Media query for mobile devices\r\n  @media only screen and (max-width: 768px) {\r\n      display: none;\r\n  }\r\n`;","// VideoBackground component\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { VideoContainer, Video, OverlayText, Title, Content } from './styles';\r\nimport { splitTitleIntoWords, wrapParagraphs } from '../../common/utils/textAnimations';\r\n\r\ninterface VideoBackgroundProps {\r\n  videoSrc: string;\r\n  title: string;\r\n  text: string;\r\n}\r\n\r\nconst VideoBackground: React.FC<VideoBackgroundProps> = ({ videoSrc, title, text }) => {\r\n  const titleRef = useRef<HTMLHeadingElement>(null);\r\n  const [titleInView, setTitleInView] = useState(false);\r\n\r\n  const textRef = useRef<HTMLDivElement>(null);\r\n  const [textInView, setTextInView] = useState(false);\r\n\r\n  // Intersection observer setup for triggering animations when elements come into view\r\n  useEffect(() => {\r\n    const observerOptions = { threshold: 0.1 };\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach(entry => {\r\n        if (entry.target === titleRef.current) {\r\n          setTitleInView(entry.isIntersecting);\r\n        }\r\n        if (entry.target === textRef.current) {\r\n          setTextInView(entry.isIntersecting);\r\n        }\r\n      });\r\n    }, observerOptions);\r\n\r\n    if (titleRef.current) {\r\n      observer.observe(titleRef.current);\r\n    }\r\n    if (textRef.current) {\r\n      observer.observe(textRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (titleRef.current) {\r\n        observer.unobserve(titleRef.current);\r\n      }\r\n      if (textRef.current) {\r\n        observer.unobserve(textRef.current);\r\n      }\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // Responsive title change based on screen width\r\n  const responsiveTitle = window.innerWidth <= 768 ? \"Welcome to The Boss Media Network\" : title;\r\n\r\n  return (\r\n    <VideoContainer>\r\n      <Video autoPlay loop muted>\r\n        <source src={videoSrc} type=\"video/webm\" />\r\n        <source src={videoSrc.replace('.webm', '.mp4')} type=\"video/mp4\" />\r\n        Your browser does not support the video tag.\r\n      </Video>\r\n      <OverlayText>\r\n        <Title ref={titleRef} className={titleInView ? 'inView' : ''}>\r\n          {splitTitleIntoWords(responsiveTitle)}\r\n        </Title>\r\n        <Content ref={textRef} className={textInView ? 'inView' : ''}>\r\n          {wrapParagraphs(text)}\r\n        </Content>\r\n      </OverlayText>\r\n    </VideoContainer>\r\n  );\r\n};\r\n\r\nexport default VideoBackground;\r\n"],"names":["splitTitleIntoWords","title","split","map","word","index","_jsxs","React","children","_jsx","className","concat","wrapParagraphs","text","wordIndex","elements","words","forEach","wordIdx","part","partIdx","push","modifiedPart","nextPart","length","endsWith","includes","fadeInUp","keyframes","_templateObject","_taggedTemplateLiteral","neonGlow","_templateObject2","textNeonGlow","_templateObject3","slideInLeft","_templateObject4","slideInUp","_templateObject5","fadeInLetters","_templateObject6","slideInRight","_templateObject7","fadeIn","_templateObject8","GreyArea","styled","section","_templateObject9","props","isVisible","css","_templateObject10","div","_templateObject11","_templateObject12","generateDelay","button","_templateObject13","animationsFinished","_templateObject14","baseDelay","arguments","undefined","_templateObject15","MiddleBlockSection","_templateObject16","_templateObject17","Title","_templateObject18","Array","from","_","_templateObject19","Content","_templateObject20","_templateObject21","_templateObject22","ContentWrapper","_templateObject23","_templateObject24","ImageWrapper","_templateObject25","_templateObject26","VideoContainer","Video","video","OverlayText","_ref","videoSrc","titleRef","useRef","_useState","useState","_useState2","_slicedToArray","titleInView","setTitleInView","textRef","_useState3","_useState4","textInView","setTextInView","useEffect","observer","IntersectionObserver","entries","entry","target","current","isIntersecting","threshold","observe","unobserve","disconnect","responsiveTitle","window","innerWidth","autoPlay","loop","muted","src","type","replace","ref"],"sourceRoot":""}